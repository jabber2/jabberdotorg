/* --------------------------------------------------------------------------
 *
 * License
 *
 * The contents of this file are subject to the Jabber Open Source License
 * Version 1.0 (the "JOSL").  You may not copy or use this file, in either
 * source code or executable form, except in compliance with the JOSL. You
 * may obtain a copy of the JOSL at http://www.jabber.org/ or at
 * http://www.opensource.org/.  
 *
 * Software distributed under the JOSL is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied.  See the JOSL
 * for the specific language governing rights and limitations under the
 * JOSL.
 *
 * Copyrights
 * 
 * Portions created by or assigned to Jabber.com, Inc. are 
 * Copyright (c) 1999-2002 Jabber.com, Inc.  All Rights Reserved.  Contact
 * information for Jabber.com, Inc. is available at http://www.jabber.com/.
 *
 * Portions Copyright (c) 1998-1999 Jeremie Miller.
 * 
 * Portions Copyright (c) 2003 Mike Prince.
 *
 * Acknowledgements
 * 
 * Special thanks to the Jabber Open Source Contributors for their
 * suggestions and support of Jabber.
 * 
 * Alternatively, the contents of this file may be used under the terms of the
 * GNU General Public License Version 2 or later (the "GPL"), in which case
 * the provisions of the GPL are applicable instead of those above.  If you
 * wish to allow use of your version of this file only under the terms of the
 * GPL and not to allow others to use your version of this file under the JOSL,
 * indicate your decision by deleting the provisions above and replace them
 * with the notice and other provisions required by the GPL.  If you do not
 * delete the provisions above, a recipient may use your version of this file
 * under either the JOSL or the GPL. 
 * 
 * 
 * --------------------------------------------------------------------------*/
#include "jsm.h"

// check each packet, bcc what we like
mreturn mod_echo_bcc( mapi m, void *arg )
{
    // if( m->packet->type != JPACKET_PRESENCE &&
    if( m->packet->type != JPACKET_S10N ) return M_PASS;

    // craft a template message that wraps the payload
    xmlnode msg = xmlnode_new_tag( "message" );
    xmlnode_insert_node( msg, m->packet->x );
    xmlnode_put_attrib( msg, "from", jid_full( m->packet->from ) );
    xmlnode_put_attrib( msg, "type", "echo" );

    log_debug( "mod_echo", "bcc: %i %s", m->e, xmlnode2str( msg ) );

    // walk the list of recipients and fire a message to each
    jid bcc = (jid) arg;
    for( ; bcc != NULL; bcc = bcc->next )
    {
        // avoid infinite passbacks
        if( jid_cmp( bcc, m->packet->from ) == 0 ) continue; 

        xmlnode packet = xmlnode_dup( msg );
        xmlnode_put_attrib( packet, "to", jid_full( bcc ) );
        js_deliver( m->si, jpacket_new( packet ) );
    }

    // remember to free our template
    xmlnode_free( msg );

    return M_PASS;
}

// new bcc-like handling for sessions
mreturn mod_echo_session( mapi m, void *arg )
{
    js_mapi_session( es_OUT, m->s, mod_echo_bcc, arg );
    js_mapi_session( es_IN, m->s, mod_echo_bcc, arg );
    return M_PASS;
}

// traditional echo handling
mreturn mod_echo_reply(mapi m, void *arg)
{
    if(m->packet->type != JPACKET_MESSAGE) return M_IGNORE;

    /* first, is this a valid request? */
    if(m->packet->to->resource == NULL || strncasecmp(m->packet->to->resource,"echo",4) != 0) return M_PASS;

    log_debug("mod_echo","handling echo request from %s",jid_full(m->packet->from));

    xmlnode_put_attrib(m->packet->x,"from",jid_full(m->packet->to));
    xmlnode_put_attrib(m->packet->x,"to",jid_full(m->packet->from));
    jpacket_reset(m->packet);
    js_deliver(m->si,m->packet);

    return M_HANDLED;
}

void mod_echo(jsmi si)
{
    // use the <jabber><jsm><presence><bcc>address entries
    xmlnode cfg = js_config(si, "presence");
    jid bcc = NULL;
    for(cfg = xmlnode_get_firstchild(cfg); cfg != NULL; cfg = xmlnode_get_nextsibling(cfg))
    {
        if(xmlnode_get_type(cfg) != NTYPE_TAG || j_strcmp(xmlnode_get_name(cfg),"bcc") != 0) continue;
        char * address = xmlnode_get_data(cfg);
	log_debug("mod_echo","adding bcc: %s",address);
        if(bcc == NULL)
            bcc = jid_new(si->p,address);
        else
            jid_append(bcc,jid_new(si->p,address));
    }

    // signal if no one was specified
    if( bcc == NULL )
    {
        log_debug("mod_echo","no <bcc> addresses specified");
        return;
    }

    js_mapi_register( si, e_SERVER, mod_echo_reply, NULL );
    //js_mapi_register( si, e_SERVER, mod_echo_bcc, (void*)bcc );
    js_mapi_register( si, e_DELIVER, mod_echo_bcc, (void*)bcc );
    //js_mapi_register( si, e_SESSION, mod_echo_session, (void*)bcc );
}
