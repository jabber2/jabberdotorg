/* --------------------------------------------------------------------------
 *
 * License
 *
 * The contents of this file are subject to the Jabber Open Source License
 * Version 1.0 (the "License").  You may not copy or use this file, in either
 * source code or executable form, except in compliance with the License.  You
 * may obtain a copy of the License at http://www.jabber.com/license/ or at
 * http://www.opensource.org/.
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied.  See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * Copyright (c) 1999-2000 Schuyler Heath <sheath@jabber.org>
 *
 * Acknowledgements
 *
 * Special thanks to the Jabber Open Source Contributors for their
 * suggestions and support of Jabber.
 *
 * unknown.c - handles packets from users without a session, starts sessions
 * --------------------------------------------------------------------------*/

/*
 * Added modifications for ICQv7-t project (icqv7-t.sf.net) by
 *  - Alexandre N. Safiullin
 *
 * Coryright (c) 2001      Alexandre N. Safiullin <alex_@unis-ru.com>
 */

#include "icqtransport.h"
#include <sys/utsname.h>

void it_unknown_iq(iti ti, jpacket jp);
void it_unknown_presence(void *arg);
void it_unknown_reg_get(iti ti, jpacket jp);
void it_unknown_reg_set(iti ti, jpacket jp);

void it_unknown(iti ti, jpacket jp) {

	log_error("debug","it_unknown");
    switch (jp->type) {
    case JPACKET_IQ:
		it_unknown_iq(ti,jp);
		break;

    case JPACKET_MESSAGE:
    case JPACKET_S10N:
        jp->aux1 = (void *) ti;
        mtq_send(NULL,jp->p,it_unknown_bounce,(void *) jp);
        break;

    case JPACKET_PRESENCE:
        if ((jpacket_subtype(jp) == JPACKET__AVAILABLE ||
			 jpacket_subtype(jp) == JPACKET__INVISIBLE)
			&& jp->to->user == NULL ) {

            jp->aux1 = (void *) ti;
            mtq_send(NULL,jp->p,it_unknown_presence,(void *) jp);
            break;
        }
    default:
        xmlnode_free(jp->x);
    }
}

void it_unknown_iq(iti ti, jpacket jp)
{
    char *ns;

    if (jp->to->user != NULL)
    {
        jp->aux1 = (void *) ti;
        mtq_send(NULL,jp->p,it_unknown_bounce,(void *) jp);
        return;
    }

    ns = xmlnode_get_attrib(jp->iq,"xmlns");

    switch (jpacket_subtype(jp))
    {
    case JPACKET__SET:
        if (j_strcmp(ns,NS_REGISTER) == 0)
            it_unknown_reg_set(ti,jp);
        else
        {
            jutil_error(jp->x,TERROR_NOTALLOWED);
            it_deliver(ti,jp->x);
        }
        break;

    case JPACKET__GET:
        if (j_strcmp(ns,NS_REGISTER) == 0)
            it_unknown_reg_get(ti,jp);
        else if (j_strcmp(ns,NS_BROWSE) == 0)
            it_iq_browse_server(ti,jp);
        else if (j_strcmp(ns,NS_VERSION) == 0)
            it_iq_version(ti,jp);
        else if (j_strcmp(ns,NS_TIME) == 0)
            it_iq_time(ti,jp);
        else if (j_strcmp(ns,NS_VCARD) == 0)
            it_iq_vcard_server(ti,jp);
        else if (j_strcmp(ns,NS_LAST) == 0)
            jp->to->user == NULL ? it_iq_last(ti,jp) : xmlnode_free(jp->x);
/*         else if (j_strcmp(ns,NS_ADMIN) == 0) */
/*             it_iq_admin(ti,jp); */
        else
        {
            jutil_error(jp->x,TERROR_NOTALLOWED);
            it_deliver(ti,jp->x);
        }
        break;

    default:
        jutil_error(jp->x,TERROR_NOTALLOWED);
        it_deliver(ti,jp->x);
    }
}

void it_unknown_presence(void *arg)
{
    jpacket jp = (jpacket) arg;
    iti ti = (iti) jp->aux1;
    xmlnode reg,x;
    session s;
	jpq jq;



#ifdef sql
    reg = icq_xdb_get(ti, jp->to->server, jp->from, jp);
    log_debug(ZONE,"%s, %s",xmlnode2str(reg), jp->from->full);
#else
    reg = xdb_get(ti->xc,it_xdb_id(jp->p,jp->from,jp->to->server),NS_REGISTER);
#endif

    if (reg == NULL)
    {
        log_debug(ZONE,"Registration not found for %s",jid_full(jp->from));
        xmlnode_free(jp->x);
        return;
    }

	s = (session) xhash_get(ti->sessions,jid_full(jid_user(jp->from)));
    if (s != NULL)
    {
        log_debug(ZONE,"Session %s already created",jid_full(jp->from));
        jp->aux1 = (void *) s;
        mtq_send(s->q,jp->p,it_session_jpacket,(void *) jp);
        xmlnode_free(reg);
        return;
    }

    s = it_session_create(ti,jp);
    s->type = stype_normal;
    s->uin = it_strtouin(xmlnode_get_tag_data(reg,"username"));

    /* update users presence */
    s->p_db = ppdb_insert(s->p_db,jp->from,jp->x);

	if(jpacket_subtype(jp)==JPACKET__AVAILABLE){
		x=jutil_iqnew(JPACKET__SET,NS_REGISTER);
		xmlnode_put_attrib(x,"from",jid_full(jp->from));
		xmlnode_hide(xmlnode_get_tag(x,"query"));
		xmlnode_insert_node(x,reg);
		log_error("debug","trying to log in using existing registration: %s\n",
				  xmlnode2str(x));

		xmlnode_free(reg);
		it_retransmit(ti,x);

		it_contact_load_roster(s);
	}
	else /* INVISIBLE -> external back end should be connected */
		it_retransmit(ti,xmlnode_dup(jp->x));

	jq = pmalloco(jp->p,sizeof(_jpq)); /* save packet to handle it when
confirmation
										  will be received */
	jq->jp = jp;
	pth_msgport_put(s->queue,(pth_message_t *)jq);
	return;

}

void it_unknown_reg_get(iti ti, jpacket jp)
{
    xmlnode q;

    if (ti->reg_inst)
    {
        jutil_iqresult(jp->x);
        q = xmlnode_insert_tag(jp->x,"query");
        xmlnode_put_attrib(q,"xmlns",NS_REGISTER);

        xmlnode_insert_tag(q,"username");
        xmlnode_insert_tag(q,"nick");
        xmlnode_insert_tag(q,"first");
        xmlnode_insert_tag(q,"last");
        xmlnode_insert_tag(q,"email");
        xmlnode_insert_tag(q,"password");


xmlnode_insert_cdata(xmlnode_insert_tag(q,"instructions"),ti->reg_inst,-1);

xmlnode_insert_cdata(xmlnode_insert_tag(q,"key"),jutil_regkey(NULL,jid_full(jp->from)),-1);
    }
    else
        jutil_error(jp->x,TERROR_NOTALLOWED);

    it_deliver(ti,jp->x);
}

void it_unknown_reg_set(iti ti, jpacket jp)
{
    session s;
    xmlnode q = jp->iq;
    UIN_t uin;
    jpq jq;
    char *user, *pass;
	xmlnode logon;

    if (ti->reg_inst == NULL)
    {
        jutil_error(jp->x,TERROR_NOTALLOWED);
        it_deliver(ti,jp->x);
        return;
    }

    pass = xmlnode_get_tag_data(q,"password");
    user = xmlnode_get_tag_data(q,"username");
	if(!user || !pass)
    {
        jutil_error(jp->x,TERROR_NOTACCEPTABLE);
        it_deliver(ti,jp->x);
        return;
    }

    uin = it_strtouin(user);
    if (uin == 0)
    {
        jutil_error(jp->x,TERROR_NOTACCEPTABLE);
        it_deliver(ti,jp->x);
        return;
    }

#ifdef sql
	logon = xmlnode_new_tag("logon");
    xmlnode_put_attrib(logon, "id", user);
    xmlnode_put_attrib(logon, "pass",pass);
	log_error(ZONE,"%s",xmlnode2str(logon));
	icq_xdb_set(ti, jp->from->server,jp->from, logon);
#endif

    s = it_session_create(ti,jp);
    s->type = stype_register;
    s->uin = uin;

    jq = pmalloco(jp->p,sizeof(_jpq));
    jq->jp = jp;
    pth_msgport_put(s->queue,(pth_message_t *)jq);
	it_retransmit(ti,xmlnode_dup(jp->x));
}

void it_unknown_bounce(void *arg)
{
    jpacket jp = (jpacket) arg;
    iti ti = (iti) jp->aux1;
    xmlnode reg;

    reg = xdb_get(ti->xc,it_xdb_id(jp->p,jp->from,jp->to->server),NS_REGISTER);
    if (reg != NULL)
    {
        jutil_error(jp->x,(terror){404,"Session Not Found"});
        xmlnode_free(reg);
    }
    else
        jutil_error(jp->x,TERROR_REGISTER);

    it_deliver(ti,jp->x);
}

