Return-Path: <jdev-bounces@jabber.org>
Envelope-To: <aahsan@actiontec.com>
X-Spam-Status: SpamAssassin Failed
Received: from hades.jabber.org ([208.245.212.109] verified)
  by actiontec.com (CommuniGate Pro SMTP 4.1.8)
  with ESMTP id 5614046 for aahsan@actiontec.com; Sun, 02 May 2004 15:24:39 -0700
Received: from [127.0.0.1] (hades [127.0.0.1])
	by hades.jabber.org (Postfix) with ESMTP
	id 32456642C4; Sun,  2 May 2004 17:24:28 -0500 (CDT)
Delivered-To: jdev@jabber.org
Received: from mtaw4.prodigy.net (mtaw4.prodigy.net [64.164.98.52])
	by hades.jabber.org (Postfix) with ESMTP id 55718642C0
	for <jdev@jabber.org>; Sun,  2 May 2004 17:24:25 -0500 (CDT)
Received: from affinix.com (qmailr@adsl-63-193-241-205.dsl.snfc21.pacbell.net
	[63.193.241.205])
	by mtaw4.prodigy.net (8.12.10/8.12.10) with SMTP id i42MOIdV000959
	for <jdev@jabber.org>; Sun, 2 May 2004 15:24:24 -0700 (PDT)
Received: (qmail 9867 invoked from network); 3 May 2004 06:44:39 -0000
Received: from unknown (HELO localhost) (127.0.0.1)
	by localhost with SMTP; 3 May 2004 06:44:39 -0000
From: Justin Karneges <justin-keyword-jabber.093179@affinix.com>
To: trejkaz@xaoza.net,
	Jabber software development list <jdev@jabber.org>
Subject: Re: [jdev] sending custom messages from one client to another
Date: Sun, 2 May 2004 15:24:04 -0700
User-Agent: KMail/1.6.1
References: <60E05DB357F28743BD926E38ECD19D03756B7D@exchange.fuel.int>
	<200404301628.06058.justin-keyword-jabber.093179@affinix.com>
	<200405030013.21328.trejkaz@xaoza.net>
In-Reply-To: <200405030013.21328.trejkaz@xaoza.net>
MIME-Version: 1.0
Content-Disposition: inline
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Message-Id: <200405021524.04516.justin-keyword-jabber.093179@affinix.com>
Cc: 
X-BeenThere: jdev@jabber.org
X-Mailman-Version: 2.1.3
Precedence: list
Reply-To: Jabber software development list <jdev@jabber.org>
List-Id: Jabber software development list <jdev.jabber.org>
List-Unsubscribe: <https://jabberstudio.org/mailman/listinfo/jdev>,
	<mailto:jdev-request@jabber.org?subject=unsubscribe>
List-Archive: <http://jabberstudio.org/pipermail/jdev>
List-Post: <mailto:jdev@jabber.org>
List-Help: <mailto:jdev-request@jabber.org?subject=help>
List-Subscribe: <https://jabberstudio.org/mailman/listinfo/jdev>,
	<mailto:jdev-request@jabber.org?subject=subscribe>
Sender: jdev-bounces@jabber.org
Errors-To: jdev-bounces@jabber.org

On Sunday 02 May 2004 7:13 am, Trejkaz Xaoza wrote:
> > 2) If there are elements recognized by the client as non-IM (such as IBB
> > data or a chat state change), then the client should process the stanza
> > in this way.  If there are multiple such elements, then only one kind of
> > processing should be performed.  Which one to choose would be
> > implementation specific, but probably picking the first one recognized
> > would be fine.  End.
>
> I would say that multiple need to be accounted for in this case, actually,
> rather than ignoring further ones.

But this could get tricky then.  What happens if a message contains an x:data 
form and an IBB packet?  The client would then have to "fork" the processing 
of this packet, in a sense, as part of it will involve displaying a form to 
the user and keeping track of a thread for the return reply, and the other 
part would be to collect IBB data into whatever sid is specified.  It would 
be simpler to assume this is illegal, though possibly hard to define.

> > 3) If there are elements recognized by the client as text, such as <body>
> > or <html>, then the message should be considered an IM.
>
> Other than needing to move this step to last place, this is spot on.

The reason for putting this at step 3 is that it forces consideration of the 
packet as an IM, even if there are further elements ("attachments").  This 
way you avoid losing the body text if you represent the attachment in some 
non-IM way (unless you're going to go putting a body text field on all of 
your non-IM dialogs!).  Step 4 would only get to choose between being 
represented as an IM or not is if there is no IM element (ie, <body>).  The 
only reason I present this as an option is that I think developers would want 
to treat them as an IM, so that there is a single way to handle them.  
Basically an IM with no body text, but with attachments.

Now, if you don't want to always handle these elements in an "attachment" 
fashion, then what you could do is "fork" the processing (as mentioned 
previously), to the point where you end up with two internal client events, 
one as an IM, and the other as a URL, but then you risk losing the 
relationship between the two.

Lastly, there is the issue of ignorable body text.  In many of the 
"functional" message stanza cases, body text is present only for the sake of 
incapable clients.  Should capable clients be displaying this body text also?  
For elements not treated as IM, having a separate chat window collecting the 
body text could be quite annoying.

> I think what we really need is a defined chain of processing by the client
> for message stanzas, so that all clients can follow a single guideline, and
> so that maybe even the JEPs could specify which point in the pipeline each
> different JEP applies to, if the processing is relevant to the particular
> JEP.

Yes.

-Justin
_______________________________________________
jdev mailing list
jdev@jabber.org
https://jabberstudio.org/mailman/listinfo/jdev
