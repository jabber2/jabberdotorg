[From nobody Tue Nov  3 07:51:34 2009
Subject: Re: [JDEV] GZipping Jabber Messages
From: Al Sutton &lt;al@alsutton.com&gt;
To: jdev@jabber.org
In-Reply-To: &lt;0c4701c19678$5b964060$0200a8c0@D4LHBR01&gt;
References: &lt;0c4701c19678$5b964060$0200a8c0@D4LHBR01&gt;
Content-Type: text/plain
Content-Transfer-Encoding: 7bit
Message-Id: &lt;1010316686.1570.6.camel@cloud.home.alsutton.com&gt;
Mime-Version: 1.0
X-Mailer: Evolution/1.0 (Preview Release)
Date: 06 Jan 2002 11:31:31 +0000

SSH uses the LempleZiv (LZ77) compression algorithm. This is the same as
Gzip, so compression using them should achieve similar results.

There is a spec for IP payload compression (ippcp) available from the
IETF as RFC2393 (http://www.ietf.org/rfc/rfc2393.txt?number=2393) which
may be worth a look as a source of inspiration/ideas.

Al.

On Sun, 2002-01-06 at 06:06, Michael F. March wrote:
&gt; After doing a longer session (about 20 minutes), I am getting
&gt; about 80% in both directions now..
&gt; 
&gt; &gt; Doing compression with SSH I am getting about 70% compression
&gt; &gt; outbound and 80% compression inbound..
&gt; &gt;
&gt; &gt; I have not investigated how OpenSSH implements compression on
&gt; &gt; the TCP stream though so I am not sure how great of gauge this
&gt; &gt; is..
&gt; &gt;
&gt; &gt; &gt; Update. I am finding that you can get better compression ratios, up to
&gt; &gt; &gt; around 57%, by maintaining the LZ dictionary between packets. Also this
&gt; &gt; &gt; reduces the processor hit asymptotically (but still quite nonzero) with
&gt; &gt; &gt; more packets sent along.
&gt; &gt; &gt;
&gt; &gt; &gt; This technique raises still other problems, though, most notably
&gt; &gt; &gt; reliability. For this to work the gzip deflater on one end and the
&gt; &gt; inflater
&gt; &gt; &gt; on the other end must remain exactly in sync for the duration of the
&gt; &gt; &gt; connection (hours, days, ...). An error in the compressed stream would
&gt; be
&gt; &gt; &gt; magnified many times over in the inflated stream. So for reliability you
&gt; &gt; &gt; had better hash or at least checksum all the data going across. That
&gt; means
&gt; &gt; &gt; you have to have an envelope format.
&gt; &gt; &gt;
&gt; &gt; &gt; So for bandwidth and processor usage, this does a lot better than I
&gt; &gt; &gt; expected compared to my original run, but now we are just a few steps
&gt; away
&gt; &gt; &gt; (credential verification, key exchange, and stream encryption) from
&gt; &gt; &gt; re-doing SSL.
&gt; &gt; &gt;
&gt; &gt; &gt; -Mike
&gt; &gt; &gt;
&gt; &gt; &gt; ----- Forwarded by Michael F Lin/Cambridge/IBM on 01/05/2002 11:38
&gt; &gt; AM -----
&gt; &gt; &gt;
&gt; &gt; &gt;                       Michael F Lin
&gt; &gt; &gt;                                                To:      jdev@jabber.org
&gt; &gt; &gt;                       01/04/2002 09:26         cc:
&gt; &gt; &gt;                       PM                       From:    Michael F
&gt; &gt; Lin/Cambridge/IBM@IBMUS
&gt; &gt; &gt;                                                Subject: Re: [JDEV]
&gt; &gt; GZipping Jabber Messages(Document link: Michael Lin)
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt; Hi Adam, I looked over some of the DotGNU mailing list archives at the
&gt; &gt; &gt; discussion you are referring to.
&gt; &gt; &gt;
&gt; &gt; &gt; One person from DotGNU says
&gt; &gt; &gt; ---
&gt; &gt; &gt; At the end of the day, it is easier to just gzip it and forget about
&gt; &gt; &gt; the problem.  No data loss, and roughly the same level of
&gt; &gt; &gt; compaction.  Highly redundant data like XML compresses
&gt; &gt; &gt; very well.  For example, the 6 Mb All.xml file for the C#
&gt; &gt; &gt; library specification compresses to ~630k using gzip: about
&gt; &gt; &gt; 10% of the original size.
&gt; &gt; &gt; ---
&gt; &gt; &gt; I believe this is misleading in the context of realtime XML streams
&gt; (e.g.
&gt; &gt; &gt; Jabber; SOAP; presumably, whatever DotGNU will use) because you are not
&gt; &gt; &gt; compressing 6Mb of data at once. Rather you are compressing small
&gt; packets,
&gt; &gt; &gt; a few hundred bytes in length in the case of Jabber, and then
&gt; transmitting
&gt; &gt; &gt; them individually. I ran some tests to see how gzip performs under these
&gt; &gt; &gt; conditions.
&gt; &gt; &gt;
&gt; &gt; &gt; I wrote a program which generates random Jabber &lt;message/&gt; packets. The
&gt; &gt; &gt; body of each message is formed by randomly selecting between 1 and 25
&gt; &gt; words
&gt; &gt; &gt; from a 10,000-word English language dictionary file. For each test
&gt; vector,
&gt; &gt; &gt; the program runs zlib compress, level 9, on it (equivalent [I think] to
&gt; &gt; &gt; gzip with maximum compression), then records the compressed size and the
&gt; &gt; &gt; original size. It repeats this until at least 1 million bytes of
&gt; &gt; &gt; uncompressed data has been processed.
&gt; &gt; &gt;
&gt; &gt; &gt; The results from about a dozen runs of this program are very consistent:
&gt; a
&gt; &gt; &gt; compression ratio of 17% in 7 seconds of runtime. A typical result is
&gt; &gt; &gt; 1,000,011 total bytes of raw data; 830,654 bytes of compressed data.
&gt; &gt; &gt;
&gt; &gt; &gt; If I comment the code to compress the test vectors, and leave the code
&gt; to
&gt; &gt; &gt; generate the test vectors, the program runs in less than 1 second.
&gt; &gt; &gt;
&gt; &gt; &gt; [This was run on]
&gt; &gt; &gt; athena% uname -a
&gt; &gt; &gt; SunOS department-of-alchemy.mit.edu 5.8 Generic_108528-08 sun4u sparc
&gt; &gt; &gt; SUNW,Ultra-60
&gt; &gt; &gt; athena%
&gt; &gt; &gt;
&gt; &gt; &gt; Obviously these are preliminary and nonscientific results only, and
&gt; there
&gt; &gt; &gt; are other factors to consider with Jabber, such as the likelihood
&gt; &gt; &gt; previously mentioned that the XML processing is going to be the limiting
&gt; &gt; &gt; factor in processor time. I find the topic quite interesting, however,
&gt; so
&gt; &gt; I
&gt; &gt; &gt; am going to fiddle around with it over the next few days and see if I
&gt; can
&gt; &gt; &gt; get it to do better with custom deflate dictionaries and such. Hopefully
&gt; I
&gt; &gt; &gt; will even find time to write something on the topic and post it with my
&gt; &gt; &gt; source code. However, based on these initial results I am very wary of
&gt; &gt; &gt; gzipping instant messaging XML because of the apparent high processing
&gt; &gt; cost
&gt; &gt; &gt; and mediocre compression ratio. I will continue to test but my
&gt; hypothesis
&gt; &gt; &gt; is that gzip or any generic compression algorithm is going to be very
&gt; &gt; &gt; mediocre for Jabber as instant messaging.
&gt; &gt; &gt;
&gt; &gt; &gt; -Mike
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt;                       Adam Theo
&gt; &gt; &gt;                       &lt;adamtheo@theoret        To:       jdev
&gt; &gt; &lt;jdev@jabber.org&gt;
&gt; &gt; &gt;                       ic.com&gt;                  cc:
&gt; &gt; &gt;                       Sent by:                 Subject:  [JDEV] GZipping
&gt; &gt; Jabber Messages
&gt; &gt; &gt;                       jdev-admin@jabber
&gt; &gt; &gt;                       .org
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt;                       01/04/2002 03:32
&gt; &gt; &gt;                       PM
&gt; &gt; &gt;                       Please respond to
&gt; &gt; &gt;                       jdev
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt; Hi, all. There's a good discussion going on over at the DotGNU Developer
&gt; &gt; &gt; list about gzip'ing the XML that is transmitted around on the DotGNU
&gt; &gt; &gt; platform.
&gt; &gt; &gt;
&gt; &gt; &gt; Was wondering if it would be possible to incorporate the same thing for
&gt; &gt; &gt; future versions of the Jabber server? Is it feasible, anyway? They are
&gt; &gt; &gt; saying the trade-offs for extra resource consumption would not be bad at
&gt; &gt; &gt; all if designed into the server properly, and would reduce bandwidth
&gt; &gt; &gt; very dramatically (like by 80%, i think). This would be useful for
&gt; &gt; &gt; high-volume servers with enough processing power, i think...
&gt; &gt; &gt; --
&gt; &gt; &gt;     /\    -- Adam Theo, Age 22, Tallahassee FL USA --
&gt; &gt; &gt;    //\\   Theoretic Solutions (http://www.theoretic.com)
&gt; &gt; &gt;   /____\    &quot;Software, Internet Services and Advocacy&quot;
&gt; &gt; &gt; /--||--\ Personal Website (http://www.theoretic.com/adamtheo)
&gt; &gt; &gt;     ||    Jabber Open IM (http://www.jabber.org)
&gt; &gt; &gt;     ||    Email &amp; Jabber: adamtheo@theoretic.com
&gt; &gt; &gt;     ||    AIM: AdamTheo2000   ICQ: 3617306   Y!: AdamTheo2
&gt; &gt; &gt;   &quot;A free-market socialist computer geek patriotic American buddhist.&quot;
&gt; &gt; &gt;
&gt; &gt; &gt; _______________________________________________
&gt; &gt; &gt; jdev mailing list
&gt; &gt; &gt; jdev@jabber.org
&gt; &gt; &gt; http://mailman.jabber.org/listinfo/jdev
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt; _______________________________________________
&gt; &gt; &gt; jdev mailing list
&gt; &gt; &gt; jdev@jabber.org
&gt; &gt; &gt; http://mailman.jabber.org/listinfo/jdev
&gt; &gt;
&gt; 
&gt; _______________________________________________
&gt; jdev mailing list
&gt; jdev@jabber.org
&gt; http://mailman.jabber.org/listinfo/jdev

]