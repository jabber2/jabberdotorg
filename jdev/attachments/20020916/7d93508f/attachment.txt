Occasionally, jabberd-1.4.2 with the standard JUD component are observed
to suddenly stop processing requests.  Actually the server load jumps and
jabberd is found to be sitting in an infinite loop, consuming 99% CPU
and not responding to any events.

The real reason still remains elusive.  The JUD definitely plays a central
role, because the problem goes away if the JUD is removed.  It could be a
problem in <xdb> handling however.

The first patch is to jabberd/lib/pool.c and simply catches the runaway
jabberd when it enters the endless loop.  The idea was to get it to core 
dump so that I could understand how it got into this state.

The other observation about this problem is that shortly before the server
spirals into its endless loop, the log file shows that it tried to access 
the global.xdb file (where JUD entries get stored); however the first 8
bytes of the filename have been overwritten.

The second series of patches just adds some tracing to xdb_file/xdb_file.c
to try and determine exactly when the filename is being corrupted.  Also,
the last hunk of the patch checks that the filename begins with "/var", 
e.g. I'm trying to detect when it has been modified.

This is all just debugging/hunting.  I haven't found the actual problem,
and other priorities had me simply replace the JUD with a crude version
written in Perl.

16-Sep-2002 / Ralph Siemsen / ralphs@blueairnetworks.com

--- /home/ralphs/src/jabber-1.4.2/jabberd/lib/pool.c	Fri Feb  8 02:39:22 2002
+++ jabberd/lib/pool.c	Tue Sep  3 12:59:47 2002
@@ -102,7 +102,8 @@
 void _pool_cleanup_append(pool p, struct pfree *pf)
 {
     struct pfree *cur;
-
+    int i = 0;
+    
     if(p->cleanup == NULL)
     {
         p->cleanup = pf;
@@ -110,7 +111,13 @@
     }
 
     /* fast forward to end of list */
-    for(cur = p->cleanup; cur->next != NULL; cur = cur->next);
+    for(cur = p->cleanup; cur->next != NULL; cur = cur->next) {
+	    if (i++ > 10000) {
+		void (*please_dump_core_now)(void) = 0x0;
+		printf("RFS: _pool_cleanup_append looping!\n");
+		please_dump_core_now();
+	   }
+    }
 
     cur->next = pf;
 }
--- /home/ralphs/src/jabber-1.4.2/xdb_file/xdb_file.c	Fri Feb  8 02:39:30 2002
+++ xdb_file/xdb_file.c	Tue Sep  3 12:59:47 2002
@@ -183,11 +183,13 @@
     else
         full = xdb_file_full(flag_set, p->p, xf->spool, p->id->server, "global", "xdb");
 
+    log_debug(ZONE,"RFS: filename now %s",full);
     if(full == NULL)
         return r_ERR;
 
     /* load the data from disk/cache */
     top = file = xdb_file_load(p->host, full, xf->cache);
+    log_debug(ZONE,"RFS: filename now %s",full);
 
     /* if we're dealing w/ a resource, just get that element */
     if(p->id->resource != NULL)
@@ -201,6 +203,7 @@
 
     /* just query the relevant namespace */
     data = xmlnode_get_tag(top,spools(p->p,"?xdbns=",ns,p->p));
+    log_debug(ZONE,"RFS: filename now %s",full);
 
     if(flag_set)
     {
@@ -243,6 +246,7 @@
             data = xmlnode_insert_tag_node(top, xmlnode_get_firstchild(p->x));
             xmlnode_put_attrib(data,"xdbns",ns);
         }
+    log_debug(ZONE,"RFS: filename now %s",full);
 
         /* save the file if we still want to */
         if(flag_set && xmlnode2file(full,file) < 0)
@@ -258,6 +262,7 @@
             xmlnode_hide_attrib(xmlnode_insert_tag_node(p->x, data),"xdbns");
         }
     }
+    log_debug(ZONE,"RFS: filename now %s",full);
 
     if(ret)
     {
@@ -267,8 +272,17 @@
         deliver(dpacket_new(p->x), NULL); /* dpacket_new() shouldn't ever return NULL */
 
         /* remove the cache'd item if it was a set or we're not configured to cache */
+    log_debug(ZONE,"RFS: filename now %s",full);
         if(xf->timeout == 0 || flag_set)
         {
+		// RFS: try to catch corruption
+		if (strncmp(full, "/var", 4) != 0) {
+			void (*please_dump_core_now)(void) = 0x0;
+			log_debug(ZONE, "RFS: ERROR: fullpath doesn't start with /var\n");
+			please_dump_core_now();
+		dead:
+			goto dead;
+		}
             log_debug(ZONE,"decaching %s",full);
             ghash_remove(xf->cache,full);
             xmlnode_free(file);
